{"version":3,"file":"sodium.esm.js","sources":["../src/lib/sodium/Transaction.ts","../src/lib/sodium/Vertex.ts","../src/lib/sodium/Lambda.ts","../src/lib/sodium/CoalesceHandler.ts","../src/lib/sodium/Lazy.ts","../src/lib/sodium/Unit.ts","../src/lib/sodium/Operational.ts","../src/lib/sodium/Cell.ts","../src/lib/sodium/Listener.ts","../src/lib/sodium/LazyCell.ts","../src/lib/sodium/Stream.ts","../src/lib/sodium/StreamSink.ts","../src/lib/sodium/CellLoop.ts","../src/lib/sodium/CellSink.ts","../src/lib/sodium/Tuple2.ts","../src/lib/sodium/TimerSystem.ts","../src/lib/sodium/SecondsTimerSystem.ts","../src/lib/sodium/MillisecondsTimerSystem.ts","../src/lib/sodium/IOAction.ts"],"sourcesContent":["import {Vertex} from './Vertex';\r\nimport * as Collections from 'typescript-collections';\r\n\r\nexport class Entry\r\n{\r\n  constructor(rank: Vertex, action: () => void)\r\n  {\r\n    this.rank = rank;\r\n    this.action = action;\r\n    this.seq = Entry.nextSeq++;\r\n  }\r\n\r\n  private static nextSeq: number = 0;\r\n  rank: Vertex;\r\n  action: () => void;\r\n  seq: number;\r\n\r\n  toString(): string\r\n  {\r\n    return this.seq.toString();\r\n  }\r\n}\r\n\r\nexport class Transaction\r\n{\r\n  public static currentTransaction: Transaction = null;\r\n  private static onStartHooks: (() => void)[] = [];\r\n  private static runningOnStartHooks: boolean = false;\r\n\r\n  constructor() {}\r\n\r\n  inCallback: number = 0;\r\n  private toRegen: boolean = false;\r\n\r\n  requestRegen(): void\r\n  {\r\n    this.toRegen = true;\r\n  }\r\n\r\n  prioritizedQ: Collections.PriorityQueue<Entry> = new Collections.PriorityQueue<Entry>((a, b) =>\r\n  {\r\n    // Note: Low priority numbers are treated as \"greater\" according to this\r\n    // comparison, so that the lowest numbers are highest priority and go first.\r\n    if (a.rank.rank < b.rank.rank) return 1;\r\n    if (a.rank.rank > b.rank.rank) return -1;\r\n    if (a.seq < b.seq) return 1;\r\n    if (a.seq > b.seq) return -1;\r\n    return 0;\r\n  });\r\n  private entries: Collections.Set<Entry> = new Collections.Set<Entry>((a) => a.toString());\r\n  private sampleQ: Array<() => void> = [];\r\n  private lastQ: Array<() => void> = [];\r\n  private postQ: Array<() => void> = null;\r\n\r\n  prioritized(target: Vertex, action: () => void): void\r\n  {\r\n    const e = new Entry(target, action);\r\n    this.prioritizedQ.enqueue(e);\r\n    this.entries.add(e);\r\n  }\r\n\r\n  sample(h: () => void): void\r\n  {\r\n    this.sampleQ.push(h);\r\n  }\r\n\r\n  last(h: () => void): void\r\n  {\r\n    this.lastQ.push(h);\r\n  }\r\n\r\n  public static post_(action: () => void): void {\r\n    Transaction.run(() => Transaction.currentTransaction.post(0, action));\r\n  }\r\n\r\n  /**\r\n   * Add an action to run after all last() actions.\r\n   */\r\n  post(childIx: number, action: () => void): void\r\n  {\r\n    if (this.postQ == null)\r\n      this.postQ = [];\r\n    // If an entry exists already, combine the old one with the new one.\r\n    while (this.postQ.length <= childIx)\r\n      this.postQ.push(null);\r\n    const existing = this.postQ[childIx],\r\n      neu =\r\n        existing === null ? action\r\n          : () =>\r\n        {\r\n          existing();\r\n          action();\r\n        };\r\n    this.postQ[childIx] = neu;\r\n  }\r\n\r\n  // If the priority queue has entries in it when we modify any of the nodes'\r\n  // ranks, then we need to re-generate it to make sure it's up-to-date.\r\n  private checkRegen(): void\r\n  {\r\n    if (this.toRegen)\r\n    {\r\n      this.toRegen = false;\r\n      this.prioritizedQ.clear();\r\n      const es = this.entries.toArray();\r\n      for (let i: number = 0; i < es.length; i++)\r\n        this.prioritizedQ.enqueue(es[i]);\r\n    }\r\n  }\r\n\r\n  public isActive() : boolean\r\n  {\r\n    return Transaction.currentTransaction ? true : false;\r\n  }\r\n\r\n  close(): void\r\n  {\r\n    while(true)\r\n    {\r\n      while (true)\r\n      {\r\n        this.checkRegen();\r\n        if (this.prioritizedQ.isEmpty()) break;\r\n        const e = this.prioritizedQ.dequeue();\r\n        this.entries.remove(e);\r\n        e.action();\r\n      }\r\n\r\n      const sq = this.sampleQ;\r\n      this.sampleQ = [];\r\n      for (let i = 0; i < sq.length; i++)\r\n        sq[i]();\r\n\r\n      if(this.prioritizedQ.isEmpty() && this.sampleQ.length < 1) break;\r\n    }\r\n\r\n    for (let i = 0; i < this.lastQ.length; i++)\r\n      this.lastQ[i]();\r\n    this.lastQ = [];\r\n    if (this.postQ != null)\r\n    {\r\n      for (let i = 0; i < this.postQ.length; i++)\r\n      {\r\n        if (this.postQ[i] != null)\r\n        {\r\n          const parent = Transaction.currentTransaction;\r\n          try\r\n          {\r\n            if (i > 0)\r\n            {\r\n              Transaction.currentTransaction = new Transaction();\r\n              try\r\n              {\r\n                this.postQ[i]();\r\n                Transaction.currentTransaction.close();\r\n              }\r\n              catch (err)\r\n              {\r\n                Transaction.currentTransaction.close();\r\n                throw err;\r\n              }\r\n            }\r\n            else\r\n            {\r\n              Transaction.currentTransaction = null;\r\n              this.postQ[i]();\r\n            }\r\n            Transaction.currentTransaction = parent;\r\n          }\r\n          catch (err)\r\n          {\r\n            Transaction.currentTransaction = parent;\r\n            throw err;\r\n          }\r\n        }\r\n      }\r\n      this.postQ = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a runnable that will be executed whenever a transaction is started.\r\n   * That runnable may start transactions itself, which will not cause the\r\n   * hooks to be run recursively.\r\n   *\r\n   * The main use case of this is the implementation of a time/alarm system.\r\n   */\r\n  static onStart(r: () => void): void\r\n  {\r\n    Transaction.onStartHooks.push(r);\r\n  }\r\n\r\n  public static run<A>(f: () => A): A\r\n  {\r\n    const transWas: Transaction = Transaction.currentTransaction;\r\n    if (transWas === null)\r\n    {\r\n      if (!Transaction.runningOnStartHooks)\r\n      {\r\n        Transaction.runningOnStartHooks = true;\r\n        try\r\n        {\r\n          for (let i = 0; i < Transaction.onStartHooks.length; i++)\r\n            Transaction.onStartHooks[i]();\r\n        }\r\n        finally\r\n        {\r\n          Transaction.runningOnStartHooks = false;\r\n        }\r\n      }\r\n      Transaction.currentTransaction = new Transaction();\r\n    }\r\n    try\r\n    {\r\n      const a: A = f();\r\n      if (transWas === null)\r\n      {\r\n        Transaction.currentTransaction.close();\r\n        Transaction.currentTransaction = null;\r\n      }\r\n      return a;\r\n    }\r\n    catch (err)\r\n    {\r\n      if (transWas === null)\r\n      {\r\n        Transaction.currentTransaction.close();\r\n        Transaction.currentTransaction = null;\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n","import { Transaction } from \"./Transaction\";\r\nimport { Set } from \"typescript-collections\";\r\n\r\nlet totalRegistrations : number = 0;\r\nexport function getTotalRegistrations() : number {\r\n    return totalRegistrations;\r\n}\r\n\r\nexport class Source {\r\n    constructor(\r\n        origin : Vertex,\r\n        register_ : () => () => void\r\n    ) {\r\n        if (origin === null)\r\n            throw new Error(\"null origin!\");\r\n        this.origin = origin;\r\n        this.register_ = register_;\r\n    }\r\n    origin : Vertex;\r\n    private register_ : () => () => void;\r\n    private registered : boolean = false;\r\n    private deregister_ : () => void = null;\r\n\r\n    register(target : Vertex) : void {\r\n        if (!this.registered) {\r\n            this.registered = true;\r\n            if (this.register_ !== null)\r\n                this.deregister_ = this.register_();\r\n            else {\r\n                this.origin.increment(target);\r\n                this.deregister_ = () => this.origin.decrement(target);\r\n            }\r\n        }\r\n    }\r\n    deregister(target : Vertex) : void {\r\n        if (this.registered) {\r\n            this.registered = false;\r\n            if (this.deregister_ !== null)\r\n                this.deregister_();\r\n        }\r\n    }\r\n}\r\n\r\nexport enum Color { black, gray, white, purple };\r\nlet roots : Vertex[] = [];\r\nlet nextID : number = 0;\r\nlet verbose : boolean = false;\r\n\r\nexport function setVerbose(v : boolean) : void { verbose = v; }\r\n\r\nexport function describeAll(v : Vertex, visited : Set<number>)\r\n{\r\n    if (visited.contains(v.id)) return;\r\n    console.log(v.descr());\r\n    visited.add(v.id);\r\n    let chs = v.children();\r\n    for (let i = 0; i < chs.length; i++)\r\n        describeAll(chs[i], visited);\r\n}\r\n\r\nexport class Vertex {\r\n    static NULL : Vertex = new Vertex(\"user\", 1e12, []);\r\n    static collectingCycles : boolean = false;\r\n    id : number;\r\n\r\n\tconstructor(name : string, rank : number, sources : Source[]) {\r\n\t    this.name = name;\r\n\t\tthis.rank = rank;\r\n\t\tthis.sources = sources;\r\n\t\tthis.id = nextID++;\r\n\t}\r\n\tname : string;\r\n    rank : number;\r\n    sources : Source[];\r\n    targets : Vertex[] = [];\r\n    childrn : Vertex[] = [];\r\n    refCount() : number { return this.targets.length; };\r\n    visited : boolean = false;\r\n    register(target : Vertex) : boolean {\r\n        return this.increment(target);\r\n    }\r\n    deregister(target : Vertex) : void {\r\n        if (verbose)\r\n            console.log(\"deregister \"+this.descr()+\" => \"+target.descr());\r\n        this.decrement(target);\r\n        Transaction.post_(() => Transaction.post_(() => Vertex.collectCycles()));\r\n        //window.setTimeout(() => Vertex.collectCycles(), 0);\r\n    }\r\n    private incRefCount(target : Vertex) : boolean {\r\n        let anyChanged : boolean = false;\r\n        if (this.refCount() == 0) {\r\n            for (let i = 0; i < this.sources.length; i++)\r\n                this.sources[i].register(this);\r\n        }\r\n        this.targets.push(target);\r\n        target.childrn.push(this);\r\n        if (target.ensureBiggerThan(this.rank))\r\n            anyChanged = true;\r\n        totalRegistrations++;\r\n        return anyChanged;\r\n    }\r\n\r\n    private decRefCount(target : Vertex) : void {\r\n        if (verbose)\r\n            console.log(\"DEC \"+this.descr());\r\n        let matched = false;\r\n        for (let i = target.childrn.length-1; i >= 0; i--)\r\n            if (target.childrn[i] === this) {\r\n                target.childrn.splice(i, 1);\r\n            }\r\n        for (let i = 0; i < this.targets.length; i++)\r\n            if (this.targets[i] === target) {\r\n                this.targets.splice(i, 1);\r\n                matched = true;\r\n                break;\r\n            }\r\n        if (matched) {\r\n            if (this.refCount() == 0) {\r\n                for (let i = 0; i < this.sources.length; i++)\r\n                    this.sources[i].deregister(this);\r\n            }\r\n            totalRegistrations--;\r\n        }\r\n    }\r\n\r\n    addSource(src : Source) : void {\r\n        this.sources.push(src);\r\n        if (this.refCount() > 0)\r\n            src.register(this);\r\n    }\r\n\r\n\tprivate ensureBiggerThan(limit : number) : boolean {\r\n\t\tif (this.rank > limit || this.visited)\r\n\t\t\treturn false;\r\n\r\n        this.visited = true;\r\n\t\tthis.rank = limit + 1;\r\n\t\tfor (let i = 0; i < this.targets.length; i++)\r\n\t\t\tthis.targets[i].ensureBiggerThan(this.rank);\r\n        this.visited = false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tdescr() : string {\r\n        let colStr : string = null;\r\n        switch (this.color) {\r\n        case Color.black: colStr = \"black\"; break;\r\n        case Color.gray:  colStr = \"gray\"; break;\r\n        case Color.white: colStr = \"white\"; break;\r\n        case Color.purple: colStr = \"purple\"; break;\r\n        }\r\n        let str = this.id+\" \"+this.name+\" [\"+this.refCount()+\"/\"+this.refCountAdj+\"] \"+colStr+\" ->\";\r\n        let chs = this.children();\r\n        for (let i = 0; i < chs.length; i++) {\r\n            str = str + \" \" + chs[i].id;\r\n        }\r\n        return str;\r\n\t}\r\n\r\n\t// --------------------------------------------------------\r\n\t// Synchronous Cycle Collection algorithm presented in \"Concurrent\r\n\t// Cycle Collection in Reference Counted Systems\" by David F. Bacon\r\n\t// and V.T. Rajan.\r\n\r\n    color : Color = Color.black;\r\n    buffered : boolean = false;\r\n    refCountAdj : number = 0;\r\n\r\n\tchildren() : Vertex[] { return this.childrn; }\r\n\r\n\tincrement(referrer : Vertex) : boolean {\r\n\t    return this.incRefCount(referrer);\r\n\t}\r\n\r\n\tdecrement(referrer : Vertex) : void {\r\n\t    this.decRefCount(referrer);\r\n\t    if (this.refCount() == 0)\r\n\t        this.release();\r\n        else\r\n            this.possibleRoots();\r\n\t}\r\n\r\n    release() : void {\r\n        this.color = Color.black;\r\n        if (!this.buffered)\r\n            this.free();\r\n    }\r\n\r\n    free() : void {\r\n        while (this.targets.length > 0)\r\n            this.decRefCount(this.targets[0]);\r\n    }\r\n\r\n\tpossibleRoots() : void {\r\n\t    if (this.color != Color.purple) {\r\n\t        this.color = Color.purple;\r\n\t        if (!this.buffered) {\r\n                this.buffered = true;\r\n                roots.push(this);\r\n            }\r\n        }\r\n\t}\r\n\r\n\tstatic collectCycles() : void {\r\n        if (Vertex.collectingCycles) {\r\n            return;\r\n        }\r\n        try {\r\n            Vertex.collectingCycles = true;\r\n            Vertex.markRoots();\r\n            Vertex.scanRoots();\r\n            Vertex.collectRoots();\r\n        } finally {\r\n            Vertex.collectingCycles = false;\r\n        }\r\n\t}\r\n\r\n\tstatic markRoots() : void {\r\n\t    const newRoots : Vertex[] = [];\r\n\t    for (let i = 0; i < roots.length; i++) {\r\n            if (verbose)\r\n                console.log(\"markRoots \"+roots[i].descr());  // ###\r\n\t        if (roots[i].color == Color.purple) {\r\n\t            roots[i].markGray();\r\n\t            newRoots.push(roots[i]);\r\n            }\r\n\t        else {\r\n\t            roots[i].buffered = false;\r\n\t            if (roots[i].color == Color.black && roots[i].refCount() == 0)\r\n\t                roots[i].free();\r\n            }\r\n\t    }\r\n\t    roots = newRoots;\r\n\t}\r\n\r\n\tstatic scanRoots() : void {\r\n\t    for (let i = 0; i < roots.length; i++)\r\n\t        roots[i].scan();\r\n\t}\r\n\r\n\tstatic collectRoots() : void {\r\n\t    for (let i = 0; i < roots.length; i++) {\r\n\t        roots[i].buffered = false;\r\n\t        roots[i].collectWhite();\r\n\t    }\r\n\t    roots = [];\r\n\t}\r\n\r\n\tmarkGray() : void {\r\n\t    if (this.color != Color.gray) {\r\n\t        this.color = Color.gray;\r\n\t        let chs = this.children();\r\n\t        for (let i = 0; i < chs.length; i++) {\r\n\t            chs[i].refCountAdj--;\r\n                if (verbose)\r\n                    console.log(\"markGray \"+this.descr());\r\n\t            chs[i].markGray();\r\n            }\r\n\t    }\r\n\t}\r\n\r\n\tscan() : void {\r\n\t    if (verbose)\r\n            console.log(\"scan \"+this.descr());\r\n\t    if (this.color == Color.gray) {\r\n\t        if (this.refCount()+this.refCountAdj > 0)\r\n\t            this.scanBlack();\r\n\t        else {\r\n\t            this.color = Color.white;\r\n                if (verbose)\r\n                    console.log(\"scan WHITE \"+this.descr());\r\n                let chs = this.children();\r\n                for (let i = 0; i < chs.length; i++)\r\n                    chs[i].scan();\r\n\t        }\r\n\t    }\r\n\t}\r\n\r\n\tscanBlack() : void {\r\n\t    this.color = Color.black;\r\n        let chs = this.children();\r\n        for (let i = 0; i < chs.length; i++) {\r\n            chs[i].refCountAdj++;\r\n            if (verbose)\r\n                console.log(\"scanBlack \"+this.descr());\r\n            if (chs[i].color != Color.black)\r\n                chs[i].scanBlack();\r\n        }\r\n\t}\r\n\r\n\tcollectWhite() : void {\r\n\t    if (this.color == Color.white && !this.buffered) {\r\n            if (verbose)\r\n                console.log(\"collectWhite \"+this.descr());\r\n\t        this.color = Color.black;\r\n\t        this.refCountAdj = 0;\r\n            let chs = this.children();\r\n            for (let i = 0; i < chs.length; i++)\r\n                chs[i].collectWhite();\r\n            this.free();\r\n\t    }\r\n\t}\r\n}\r\n","import { Stream } from \"./Stream\";\r\nimport { Cell } from \"./Cell\";\r\nimport { Source } from \"./Vertex\";\r\n\r\nexport class Lambda1<A,B> {\r\n    constructor(f : (a : A) => B,\r\n                deps : Array<Stream<any>|Cell<any>>) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    f : (a : A) => B;\r\n    deps : Array<Stream<any>|Cell<any>>;\r\n}\r\n\r\nexport function lambda1<A,B>(f : (a : A) => B,\r\n                deps : Array<Stream<any>|Cell<any>>) : Lambda1<A,B>\r\n{\r\n    return new Lambda1(f, deps);\r\n}\r\n\r\nexport function Lambda1_deps<A,B>(f : ((a : A) => B) | Lambda1<A,B>) : Array<Stream<any>|Cell<any>> {\r\n    if (f instanceof Lambda1)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\n\r\nexport function Lambda1_toFunction<A,B>(f : ((a : A) => B) | Lambda1<A,B>) : (a : A) => B {\r\n    if (f instanceof Lambda1)\r\n        return f.f;\r\n    else\r\n        return <(a : A) => B>f;\r\n}\r\n\r\nexport class Lambda2<A,B,C> {\r\n    constructor(f : (a : A, b : B) => C,\r\n                deps : Array<Stream<any>|Cell<any>>) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    f : (a : A, b : B) => C;\r\n    deps : Array<Stream<any>|Cell<any>>;\r\n}\r\n\r\nexport function lambda2<A,B,C>(f : (a : A, b : B) => C,\r\n                deps : Array<Stream<any>|Cell<any>>) : Lambda2<A,B,C>\r\n{\r\n    return new Lambda2(f, deps);\r\n}\r\n\r\nexport function Lambda2_deps<A,B,C>(f : ((a : A, b : B) => C) | Lambda2<A,B,C>) : Array<Stream<any>|Cell<any>> {\r\n    if (f instanceof Lambda2)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\n\r\nexport function Lambda2_toFunction<A,B,C>(f : ((a : A, b : B) => C) | Lambda2<A,B,C>) : (a : A, b : B) => C {\r\n    if (f instanceof Lambda2)\r\n        return f.f;\r\n    else\r\n        return <(a : A, b : B) => C>f;\r\n}\r\n\r\nexport class Lambda3<A,B,C,D> {\r\n    constructor(f : (a : A, b : B, c : C) => D,\r\n                deps : Array<Stream<any>|Cell<any>>) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    f : (a : A, b : B, c : C) => D;\r\n    deps : Array<Stream<any>|Cell<any>>;\r\n}\r\n\r\nexport function lambda3<A,B,C,D>(f : (a : A, b : B, c : C) => D,\r\n                deps : Array<Stream<any>|Cell<any>>) : Lambda3<A,B,C,D>\r\n{\r\n    return new Lambda3(f, deps);\r\n}\r\n\r\nexport function Lambda3_deps<A,B,C,D>(f : ((a : A, b : B, c : C) => D)\r\n        | Lambda3<A,B,C,D>) : Array<Stream<any>|Cell<any>> {\r\n    if (f instanceof Lambda3)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\n\r\nexport function Lambda3_toFunction<A,B,C,D>(f : ((a : A, b : B, c : C) => D) | Lambda3<A,B,C,D>) : (a : A, b : B, c : C) => D {\r\n    if (f instanceof Lambda3)\r\n        return f.f;\r\n    else\r\n        return <(a : A, b : B, c : C) => D>f;\r\n}\r\n\r\nexport class Lambda4<A,B,C,D,E> {\r\n    constructor(f : (a : A, b : B, c : C, d : D) => E,\r\n                deps : Array<Stream<any>|Cell<any>>) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    f : (a : A, b : B, c : C, d : D) => E;\r\n    deps : Array<Stream<any>|Cell<any>>;\r\n}\r\n\r\nexport function lambda4<A,B,C,D,E>(f : (a : A, b : B, c : C, d : D) => E,\r\n                deps : Array<Stream<any>|Cell<any>>) : Lambda4<A,B,C,D,E>\r\n{\r\n    return new Lambda4(f, deps);\r\n}\r\n\r\nexport function Lambda4_deps<A,B,C,D,E>(f : ((a : A, b : B, c : C, d : D) => E)\r\n        | Lambda4<A,B,C,D,E>) : Array<Stream<any>|Cell<any>> {\r\n    if (f instanceof Lambda4)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\n\r\nexport function Lambda4_toFunction<A,B,C,D,E>(f : ((a : A, b : B, c : C, d : D) => E)\r\n        | Lambda4<A,B,C,D,E>) : (a : A, b : B, c : C, d : D) => E {\r\n    if (f instanceof Lambda4)\r\n        return f.f;\r\n    else\r\n        return <(a : A, b : B, c : C, d : D) => E>f;\r\n}\r\n\r\nexport class Lambda5<A,B,C,D,E,F> {\r\n    constructor(f : (a : A, b : B, c : C, d : D, e : E) => F,\r\n                deps : Array<Stream<any>|Cell<any>>) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    f : (a : A, b : B, c : C, d : D, e : E) => F;\r\n    deps : Array<Stream<any>|Cell<any>>;\r\n}\r\n\r\nexport function lambda5<A,B,C,D,E,F>(f : (a : A, b : B, c : C, d : D, e : E) => F,\r\n                deps : Array<Stream<any>|Cell<any>>) : Lambda5<A,B,C,D,E,F>\r\n{\r\n    return new Lambda5(f, deps);\r\n}\r\n\r\nexport function Lambda5_deps<A,B,C,D,E,F>(f : ((a : A, b : B, c : C, d : D, e : E) => F)\r\n        | Lambda5<A,B,C,D,E,F>) : Array<Stream<any>|Cell<any>> {\r\n    if (f instanceof Lambda5)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\n\r\nexport function Lambda5_toFunction<A,B,C,D,E,F>(f : ((a : A, b : B, c : C, d : D, e : E) => F)\r\n        | Lambda5<A,B,C,D,E,F>) : (a : A, b : B, c : C, d : D, e : E) => F {\r\n    if (f instanceof Lambda5)\r\n        return f.f;\r\n    else\r\n        return <(a : A, b : B, c : C, d : D, e : E) => F>f;\r\n}\r\n\r\nexport class Lambda6<A,B,C,D,E,F,G> {\r\n    constructor(f : (a : A, b : B, c : C, d : D, e : E, f : F) => G,\r\n                deps : Array<Stream<any>|Cell<any>>) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    f : (a : A, b : B, c : C, d : D, e : E, f : F) => G;\r\n    deps : Array<Stream<any>|Cell<any>>;\r\n}\r\n\r\nexport function lambda6<A,B,C,D,E,F,G>(f : (a : A, b : B, c : C, d : D, e : E, f : F) => G,\r\n                deps : Array<Stream<any>|Cell<any>>) : Lambda6<A,B,C,D,E,F,G>\r\n{\r\n    return new Lambda6(f, deps);\r\n}\r\n\r\nexport function Lambda6_deps<A,B,C,D,E,F,G>(f : ((a : A, b : B, c : C, d : D, e : E, f : F) => G)\r\n        | Lambda6<A,B,C,D,E,F,G>) : Array<Stream<any>|Cell<any>> {\r\n    if (f instanceof Lambda6)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\n\r\nexport function Lambda6_toFunction<A,B,C,D,E,F,G>(f : ((a : A, b : B, c : C, d : D, e : E, f : F) => G)\r\n        | Lambda6<A,B,C,D,E,F,G>) : (a : A, b : B, c : C, d : D, e : E, f : F) => G {\r\n    if (f instanceof Lambda6)\r\n        return f.f;\r\n    else\r\n        return <(a : A, b : B, c : C, d : D, e : E, f : F) => G>f;\r\n}\r\n\r\nexport function toSources(deps : Array<Stream<any>|Cell<any>>) : Source[] {\r\n    const ss : Source[] = [];\r\n    for (let i = 0; i < deps.length; i++) {\r\n        const dep = deps[i];\r\n        ss.push(new Source(dep.getVertex__(), null));\r\n    }\r\n    return ss;\r\n}\r\n","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\r\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\r\n         toSources } from \"./Lambda\";\r\nimport { Transaction } from \"./Transaction\";\r\nimport { StreamWithSend } from \"./Stream\";\r\nimport { Vertex } from \"./Vertex\";\r\n\r\nexport class CoalesceHandler<A>\r\n{\r\n\tconstructor(f : ((l : A, r : A) => A) | Lambda2<A,A,A>, out : StreamWithSend<A>)\r\n\t{\r\n\t    this.f = Lambda2_toFunction(f);\r\n\t    this.out = out;\r\n        this.out.getVertex__().sources = this.out.getVertex__().sources.concat(\r\n            toSources(Lambda2_deps(f)));\r\n        this.accumValid = false;\r\n    }\r\n\tprivate f : (l : A, r : A) => A;\r\n\tprivate out : StreamWithSend<A>;\r\n\tprivate accumValid : boolean;\r\n    private accum : A;\r\n    private verbose : boolean;\r\n    send_(a : A) {\r\n        if (this.accumValid)\r\n            this.accum = this.f(this.accum, a);\r\n        else {\r\n            Transaction.currentTransaction.prioritized(this.out.getVertex__(), () => {\r\n                this.out.send_(this.accum);\r\n                this.accumValid = false;\r\n                this.accum = null;\r\n            });\r\n            this.accum = a;\r\n            this.accumValid = true;\r\n        }\r\n    }\r\n}\r\n","/**\r\n * A representation for a value that may not be available until the current\r\n * transaction is closed.\r\n */\r\nexport class Lazy<A> {\r\n    constructor(f : () => A) {\r\n        this.f = f;\r\n    }\r\n\r\n    private f : () => A;\r\n\r\n    /**\r\n     * Get the value if available, throwing an exception if not.\r\n     * In the general case this should only be used in subsequent transactions to\r\n     * when the Lazy was obtained.\r\n     */\r\n    get() : A {\r\n        return this.f();\r\n    }\r\n\r\n    /**\r\n     * Map the lazy value according to the specified function, so the returned Lazy reflects\r\n     * the value of the function applied to the input Lazy's value.\r\n     * @param f Function to apply to the contained value. It must be <em>referentially transparent</em>.\r\n     */\r\n    map<B>(f : (a : A) => B) {\r\n        return new Lazy<B>(() => { return f(this.f()); });\r\n    }\r\n\r\n\t/**\r\n\t * Lift a binary function into lazy values, so the returned Lazy reflects\r\n     * the value of the function applied to the input Lazys' values.\r\n\t */\r\n    lift<B,C>(b : Lazy<B>, f : (a : A, b : B) => C) : Lazy<C> {\r\n        return new Lazy<C>(() => { return f(this.f(), b.f()); });\r\n    }\r\n\r\n\t/**\r\n\t * Lift a ternary function into lazy values, so the returned Lazy reflects\r\n     * the value of the function applied to the input Lazys' values.\r\n\t */\r\n    lift3<B,C,D>(b : Lazy<B>, c : Lazy<C>, f : (a : A, b : B, c : C) => D) : Lazy<D> {\r\n        return new Lazy<D>(() => { return f(this.f(), b.f(), c.f()); });\r\n    }\r\n\r\n\t/**\r\n\t * Lift a quaternary function into lazy values, so the returned Lazy reflects\r\n     * the value of the function applied to the input Lazys' values.\r\n\t */\r\n    lift4<B,C,D,E>(b : Lazy<B>, c : Lazy<C>, d : Lazy<D>, f : (a : A, b : B, c : C, d : D) => E) : Lazy<E> {\r\n        return new Lazy<E>(() => { return f(this.f(), b.f(), c.f(), d.f()); });\r\n    }\r\n}\r\n","export class Unit {\r\n    static UNIT : Unit = new Unit();\r\n    constructor() {}\r\n}\r\n","import { Stream, StreamWithSend } from \"./Stream\";\r\nimport { Cell } from \"./Cell\";\r\nimport { Transaction } from \"./Transaction\";\r\nimport { Unit } from \"./Unit\";\r\nimport { Source, Vertex } from \"./Vertex\";\r\n\r\nexport class Operational {\r\n    /**\r\n     * A stream that gives the updates/steps for a {@link Cell}.\r\n     * <P>\r\n     * This is an OPERATIONAL primitive, which is not part of the main Sodium\r\n     * API. It breaks the property of non-detectability of cell steps/updates.\r\n     * The rule with this primitive is that you should only use it in functions\r\n     * that do not allow the caller to detect the cell updates.\r\n     */\r\n    static updates<A>(c : Cell<A>) : Stream<A> {\r\n        /*  Don't think this is needed\r\n        const out = new StreamWithSend<A>(null);\r\n        out.setVertex__(new Vertex(\"updates\", 0, [\r\n                new Source(\r\n                    c.getStream__().getVertex__(),\r\n                    () => {\r\n                        return c.getStream__().listen_(out.getVertex__(), (a : A) => {\r\n                            out.send_(a);\r\n                        }, false);\r\n                    }\r\n                ),\r\n                new Source(\r\n                    c.getVertex__(),\r\n                    () => {\r\n                        return () => { };\r\n                    }\r\n                )\r\n            ]\r\n        ));\r\n        return out;\r\n        */\r\n        return c.getStream__();\r\n    }\r\n\r\n    /**\r\n     * A stream that is guaranteed to fire once in the transaction where value() is invoked, giving\r\n     * the current value of the cell, and thereafter behaves like {@link updates(Cell)},\r\n     * firing for each update/step of the cell's value.\r\n     * <P>\r\n     * This is an OPERATIONAL primitive, which is not part of the main Sodium\r\n     * API. It breaks the property of non-detectability of cell steps/updates.\r\n     * The rule with this primitive is that you should only use it in functions\r\n     * that do not allow the caller to detect the cell updates.\r\n     */\r\n    static value<A>(c : Cell<A>) : Stream<A> {\r\n        return Transaction.run(() => {\r\n            const sSpark = new StreamWithSend<Unit>();\r\n            Transaction.currentTransaction.prioritized(sSpark.getVertex__(), () => {\r\n                sSpark.send_(Unit.UNIT);\r\n            });\r\n            const sInitial = sSpark.snapshot1(c);\r\n            return Operational.updates(c).orElse(sInitial);\r\n        });\r\n    }\r\n\r\n\t/**\r\n\t * Push each event onto a new transaction guaranteed to come before the next externally\r\n\t * initiated transaction. Same as {@link split(Stream)} but it works on a single value.\r\n\t */\r\n\tstatic defer<A>(s : Stream<A>) : Stream<A> {\r\n\t    return Operational.split<A>(s.map((a : A) => {\r\n\t        return [a];\r\n\t    }));\r\n    }\r\n\r\n\t/**\r\n\t * Push each event in the list onto a newly created transaction guaranteed\r\n\t * to come before the next externally initiated transaction. Note that the semantics\r\n\t * are such that two different invocations of split() can put events into the same\r\n\t * new transaction, so the resulting stream's events could be simultaneous with\r\n\t * events output by split() or {@link defer(Stream)} invoked elsewhere in the code.\r\n\t */\r\n\tstatic split<A>(s : Stream<Array<A>>) : Stream<A> {\r\n\t    const out = new StreamWithSend<A>(null);\r\n        out.setVertex__(new Vertex(\"split\", 0, [\r\n                new Source(\r\n                    s.getVertex__(),\r\n                    () => {\r\n                        return s.listen_(out.getVertex__(), (as : Array<A>) => {\r\n                            for (let i = 0; i < as.length; i++) {\r\n                                Transaction.currentTransaction.post(i, () => {\r\n                                    Transaction.run(() => {\r\n                                        out.send_(as[i]);\r\n                                    });\r\n                                });\r\n                            }\r\n                        }, false);\r\n                    }\r\n                )\r\n            ]\r\n        ));\r\n        return out;\r\n    }\r\n}\r\n","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\r\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\r\n         Lambda3, Lambda3_deps, Lambda3_toFunction,\r\n         Lambda4, Lambda4_deps, Lambda4_toFunction,\r\n         Lambda5, Lambda5_deps, Lambda5_toFunction,\r\n         Lambda6, Lambda6_deps, Lambda6_toFunction,\r\n         toSources } from \"./Lambda\";\r\nimport { Source, Vertex } from \"./Vertex\";\r\nimport { Transaction } from \"./Transaction\";\r\nimport { Lazy } from \"./Lazy\";\r\nimport { Listener } from \"./Listener\";\r\nimport { Stream, StreamWithSend } from \"./Stream\";\r\nimport { Operational } from \"./Operational\";\r\n\r\nclass LazySample<A> {\r\n    constructor(cell : Cell<A>) {\r\n        this.cell = cell;\r\n    }\r\n    cell : Cell<A>;\r\n    hasValue : boolean = false;\r\n    value : A = null;\r\n}\r\n\r\nclass ApplyState<A,B> {\r\n    constructor() {}\r\n    f : (a : A) => B = null;\r\n    f_present : boolean = false;\r\n    a : A = null;\r\n    a_present : boolean = false;\r\n}\r\n\r\nexport class Cell<A> {\r\n\tprivate str : Stream<A>;\r\n\tprotected value : A;\r\n\tprotected valueUpdate : A;\r\n\tprivate cleanup : () => void;\r\n\tprotected lazyInitValue : Lazy<A>;  // Used by LazyCell\r\n\tprivate vertex : Vertex;\r\n\r\n    constructor(initValue : A, str? : Stream<A>) {\r\n        this.value = initValue;\r\n        if (!str) {\r\n            this.str = new Stream<A>();\r\n            this.vertex = new Vertex(\"ConstCell\", 0, []);\r\n        }\r\n        else\r\n            Transaction.run(() => this.setStream(str));\r\n    }\r\n\r\n    protected setStream(str : Stream<A>) {\r\n        this.str = str;\r\n        const me = this,\r\n              src = new Source(\r\n                str.getVertex__(),\r\n                () => {\r\n                    return str.listen_(me.vertex, (a : A) => {\r\n                        if (me.valueUpdate == null) {\r\n                            Transaction.currentTransaction.last(() => {\r\n                                me.value = me.valueUpdate;\r\n                                me.lazyInitValue = null;\r\n                                me.valueUpdate = null;\r\n                            });\r\n                        }\r\n                        me.valueUpdate = a;\r\n                    }, false);\r\n                }\r\n            );\r\n        this.vertex = new Vertex(\"Cell\", 0, [src]);\r\n        // We do a trick here of registering the source for the duration of the current\r\n        // transaction so that we are guaranteed to catch any stream events that\r\n        // occur in the same transaction.\r\n        this.vertex.register(Vertex.NULL);\r\n        Transaction.currentTransaction.last(() => {\r\n            this.vertex.deregister(Vertex.NULL);\r\n        });\r\n    }\r\n\r\n    getVertex__() : Vertex {\r\n        return this.vertex;\r\n    }\r\n\r\n    getStream__() : Stream<A> {  // TO DO: Figure out how to hide this\r\n        return this.str;\r\n    }\r\n\r\n    /**\r\n     * Sample the cell's current value.\r\n     * <p>\r\n     * It should generally be avoided in favour of {@link listen(Handler)} so you don't\r\n     * miss any updates, but in many circumstances it makes sense.\r\n     * <p>\r\n     * NOTE: In the Java and other versions of Sodium, using sample() inside map(), filter() and\r\n     * merge() is encouraged. In the Javascript/Typescript version, not so much, for the\r\n     * following reason: The memory management is different in the Javascript version, and this\r\n     * requires us to track all dependencies. In order for the use of sample() inside\r\n     * a closure to be correct, the cell that was sample()d inside the closure would have to be\r\n     * declared explicitly using the helpers lambda1(), lambda2(), etc. Because this is\r\n     * something that can be got wrong, we don't encourage this kind of use of sample() in\r\n     * Javascript. Better and simpler to use snapshot().\r\n     * <p>\r\n     * NOTE: If you need to sample() a cell, you have to make sure it's \"alive\" in terms of\r\n     * memory management or it will ignore updates. To make a cell work correctly\r\n     * with sample(), you have to ensure that it's being used. One way to guarantee this is\r\n     * to register a dummy listener on the cell. It will also work to have it referenced\r\n     * by something that is ultimately being listened to.\r\n     */\r\n    sample() : A {\r\n        return Transaction.run(() => { return this.sampleNoTrans__(); });\r\n    }\r\n\r\n    sampleNoTrans__() : A {  // TO DO figure out how to hide this\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * A variant of {@link sample()} that works with {@link CellLoop}s when they haven't been looped yet.\r\n     * It should be used in any code that's general enough that it could be passed a {@link CellLoop}.\r\n     * @see Stream#holdLazy(Lazy) Stream.holdLazy()\r\n     */\r\n    sampleLazy() : Lazy<A> {\r\n        const me = this;\r\n        return Transaction.run(() => me.sampleLazyNoTrans__());\r\n    }\r\n\r\n    sampleLazyNoTrans__() : Lazy<A> {  // TO DO figure out how to hide this\r\n        const me = this,\r\n            s = new LazySample<A>(me);\r\n        Transaction.currentTransaction.sample(() => {\r\n            s.value = me.valueUpdate != null ? me.valueUpdate : me.sampleNoTrans__();\r\n            s.hasValue = true;\r\n            s.cell = null;\r\n        });\r\n        return new Lazy<A>(() => {\r\n            if (s.hasValue)\r\n                return s.value;\r\n            else\r\n                return s.cell.sample();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Transform the cell's value according to the supplied function, so the returned Cell\r\n     * always reflects the value of the function applied to the input Cell's value.\r\n     * @param f Function to apply to convert the values. It must be <em>referentially transparent</em>.\r\n     */\r\n    map<B>(f : ((a : A) => B) | Lambda1<A,B>) : Cell<B> {\r\n        const c = this;\r\n        return Transaction.run(() =>\r\n            Operational.updates(c).map(f).holdLazy(c.sampleLazy().map(Lambda1_toFunction(f)))\r\n        );\r\n    }\r\n\r\n\t/**\r\n\t * Lift a binary function into cells, so the returned Cell always reflects the specified\r\n\t * function applied to the input cells' values.\r\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t */\r\n\tlift<B,C>(b : Cell<B>,\r\n\t          fn0 : ((a : A, b : B) => C) |\r\n\t                Lambda2<A,B,C>) : Cell<C> {\r\n        const fn = Lambda2_toFunction(fn0),\r\n            cf = this.map((aa : A) => (bb : B) => fn(aa, bb));\r\n        return Cell.apply(cf, b,\r\n            toSources(Lambda2_deps(fn0)));\r\n\t}\r\n\r\n\t/**\r\n\t * Lift a ternary function into cells, so the returned Cell always reflects the specified\r\n\t * function applied to the input cells' values.\r\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t */\r\n\tlift3<B,C,D>(b : Cell<B>, c : Cell<C>,\r\n\t             fn0 : ((a : A, b : B, c : C) => D) |\r\n\t                   Lambda3<A,B,C,D>) : Cell<D> {\r\n        const fn = Lambda3_toFunction(fn0),\r\n            mf : (aa : A) => (bb : B) => (cc : C) => D =\r\n                 (aa : A) => (bb : B) => (cc : C) => fn(aa, bb, cc),\r\n            cf = this.map(mf);\r\n        return Cell.apply(\r\n                   Cell.apply<B, (c : C) => D>(cf, b),\r\n                   c,\r\n                   toSources(Lambda3_deps(fn0)));\r\n\t}\r\n\r\n\t/**\r\n\t * Lift a quaternary function into cells, so the returned Cell always reflects the specified\r\n\t * function applied to the input cells' values.\r\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t */\r\n\tlift4<B,C,D,E>(b : Cell<B>, c : Cell<C>, d : Cell<D>,\r\n\t               fn0 : ((a : A, b : B, c : C, d : D) => E) |\r\n\t                     Lambda4<A,B,C,D,E>) : Cell<E> {\r\n        const fn = Lambda4_toFunction(fn0),\r\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => E =\r\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => fn(aa, bb, cc, dd),\r\n            cf = this.map(mf);\r\n        return Cell.apply(\r\n                   Cell.apply(\r\n                       Cell.apply<B, (c : C) => (d : D) => E>(cf, b),\r\n                       c),\r\n                   d,\r\n                   toSources(Lambda4_deps(fn0)));\r\n\t}\r\n\r\n\t/**\r\n\t * Lift a 5-argument function into cells, so the returned Cell always reflects the specified\r\n\t * function applied to the input cells' values.\r\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t */\r\n\tlift5<B,C,D,E,F>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>,\r\n\t                 fn0 : ((a : A, b : B, c : C, d : D, e : E) => F) |\r\n\t                       Lambda5<A,B,C,D,E,F>) : Cell<F> {\r\n        const fn = Lambda5_toFunction(fn0),\r\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => F =\r\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => fn(aa, bb, cc, dd, ee),\r\n            cf = this.map(mf);\r\n        return Cell.apply(\r\n                   Cell.apply(\r\n                       Cell.apply(\r\n                           Cell.apply<B, (c : C) => (d : D) => (e : E) => F>(cf, b),\r\n                           c),\r\n                       d),\r\n                   e,\r\n                   toSources(Lambda5_deps(fn0)));\r\n\t}\r\n\r\n\t/**\r\n\t * Lift a 6-argument function into cells, so the returned Cell always reflects the specified\r\n\t * function applied to the input cells' values.\r\n\t * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n\t */\r\n\tlift6<B,C,D,E,F,G>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>, f : Cell<F>,\r\n\t                   fn0 : ((a : A, b : B, c : C, d : D, e : E, f : F) => G) |\r\n\t                         Lambda6<A,B,C,D,E,F,G>) : Cell<G> {\r\n        const fn = Lambda6_toFunction(fn0),\r\n            mf : (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => (ff : F) => G =\r\n                 (aa : A) => (bb : B) => (cc : C) => (dd : D) => (ee : E) => (ff : F) => fn(aa, bb, cc, dd, ee, ff),\r\n            cf = this.map(mf);\r\n        return Cell.apply(\r\n                   Cell.apply(\r\n                       Cell.apply(\r\n                           Cell.apply(\r\n                               Cell.apply<B, (c : C) => (d : D) => (e : E) => (f : F) => G>(cf, b),\r\n                               c),\r\n                           d),\r\n                       e),\r\n                   f,\r\n                   toSources(Lambda6_deps(fn0)));\r\n\t}\r\n\r\n\t/**\r\n\t * Apply a value inside a cell to a function inside a cell. This is the\r\n\t * primitive for all function lifting.\r\n\t */\r\n\tstatic apply<A,B>(cf : Cell<(a : A) => B>, ca : Cell<A>, sources? : Source[]) : Cell<B> {\r\n    \treturn Transaction.run(() => {\r\n    \t    const state = new ApplyState<A,B>(),\r\n                out = new StreamWithSend<B>(),\r\n                cf_value = Operational.value(cf),\r\n                ca_value = Operational.value(ca),\r\n                src1 = new Source(\r\n                        cf_value.getVertex__(),\r\n                        () => {\r\n                            return cf_value.listen_(out.getVertex__(), (f : (a : A) => B) => {\r\n                                state.f = f;\r\n                                state.f_present = true;\r\n                                if (state.a_present)\r\n                                    out.send_(state.f(state.a));\r\n                            }, false);\r\n                        }\r\n                    ),\r\n                src2 = new Source(\r\n                        ca_value.getVertex__(),\r\n                        () => {\r\n                            return ca_value.listen_(out.getVertex__(), (a : A) => {\r\n                                state.a = a;\r\n                                state.a_present = true;\r\n                                if (state.f_present)\r\n                                    out.send_(state.f(state.a));\r\n                            }, false);\r\n                        }\r\n                    );\r\n            out.setVertex__(new Vertex(\"apply\", 0,\r\n                [src1, src2].concat(sources ? sources : [])\r\n            ));\r\n            return out.coalesce__((l, r) => r).holdLazy(new Lazy<B>(() =>\r\n                    cf.sampleNoTrans__()(ca.sampleNoTrans__())\r\n                ));\r\n        });\r\n\t}\r\n\r\n\t/**\r\n\t * Unwrap a cell inside another cell to give a time-varying cell implementation.\r\n\t */\r\n    static switchC<A>(cca : Cell<Cell<A>>) : Cell<A> {\r\n\t    return Transaction.run(() => {\r\n            const za = cca.sampleLazy().map((ba : Cell<A>) => ba.sample()),\r\n                out = new StreamWithSend<A>();\r\n            let last_ca : Cell<A> = null;\r\n            const cca_value = Operational.value(cca),\r\n                  src = new Source(\r\n                        cca_value.getVertex__(),\r\n                        () => {\r\n                            let kill2 : () => void = last_ca === null ? null :\r\n                                    Operational.value(last_ca).listen_(out.getVertex__(),\r\n                                        (a : A) => out.send_(a), false);\r\n                            const kill1 = cca_value.listen_(out.getVertex__(), (ca : Cell<A>) => {\r\n                                // Note: If any switch takes place during a transaction, then the\r\n                                // coalesce__() below will always cause a sample to be fetched\r\n                                // from the one we just switched to. So anything from the old input cell\r\n                                // that might have happened during this transaction will be suppressed.\r\n                                last_ca = ca;\r\n                                if (kill2 !== null)\r\n                                    kill2();\r\n                                kill2 = Operational.value(ca).listen_(out.getVertex__(),\r\n                                    (a : A) => out.send_(a), false);\r\n                            }, false);\r\n                            return () => { kill1(); kill2(); };\r\n                        }\r\n                    );\r\n            out.setVertex__(new Vertex(\"switchC\", 0, [src]));\r\n            return out.coalesce__((l, r) => r).holdLazy(za);\r\n        });\r\n\t}\r\n\r\n\t/**\r\n\t * Unwrap a stream inside a cell to give a time-varying stream implementation.\r\n\t */\r\n\tstatic switchS<A>(csa : Cell<Stream<A>>) : Stream<A> {\r\n\t    return Transaction.run(() => {\r\n            const out = new StreamWithSend<A>(),\r\n                  h2 = (a : A) => {\r\n                          out.send_(a);\r\n                      },\r\n                  src = new Source(\r\n                      csa.getVertex__(),\r\n                      () => {\r\n                          let kill2 = csa.sampleNoTrans__().listen_(out.getVertex__(), h2, false);\r\n                          const kill1 = csa.getStream__().listen_(out.getVertex__(), (sa : Stream<A>) => {\r\n                              kill2();\r\n                              kill2 = sa.listen_(out.getVertex__(), h2, true);\r\n                          }, false);\r\n                          return () => { kill1(); kill2(); };\r\n                      }\r\n                  );\r\n\t        out.setVertex__(new Vertex(\"switchS\", 0, [src]));\r\n\t        return out;\r\n\t    });\r\n    }\r\n\r\n\t/**\r\n\t * Listen for updates to the value of this cell. This is the observer pattern. The\r\n\t * returned {@link Listener} has a {@link Listener#unlisten()} method to cause the\r\n\t * listener to be removed. This is an OPERATIONAL mechanism is for interfacing between\r\n\t * the world of I/O and for FRP.\r\n\t * @param h The handler to execute when there's a new value.\r\n\t *   You should make no assumptions about what thread you are called on, and the\r\n\t *   handler should not block. You are not allowed to use {@link CellSink#send(Object)}\r\n\t *   or {@link StreamSink#send(Object)} in the handler.\r\n\t *   An exception will be thrown, because you are not meant to use this to create\r\n\t *   your own primitives.\r\n     */\r\n    listen(h : (a : A) => void) : () => void {\r\n        return Transaction.run(() => {\r\n            return Operational.value(this).listen(h);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fantasy-land Algebraic Data Type Compatability.\r\n     * Cell satisfies the Functor, Apply, Applicative categories\r\n     * @see {@link https://github.com/fantasyland/fantasy-land} for more info\r\n     */\r\n\r\n    //of :: Applicative f => a -> f a\r\n    static 'fantasy-land/of'<A>(a:A):Cell<A> {\r\n      return new Cell<A>(a);\r\n    }\r\n\r\n    //map :: Functor f => f a ~> (a -> b) -> f b\r\n    'fantasy-land/map'<B>(f : ((a : A) => B)) : Cell<B> {\r\n      return this.map(f);\r\n    }\r\n\r\n    //ap :: Apply f => f a ~> f (a -> b) -> f b\r\n    'fantasy-land/ap'<B>(cf: Cell<(a : A) => B>):Cell<B> {\r\n        return Cell.apply(cf, this);\r\n    }\r\n}\r\n","import { Source, Vertex } from \"./Vertex\";\r\n\r\nexport class Listener<A> {\r\n    constructor(h : (a : A) => void, target : Vertex) {\r\n        this.h = h;\r\n        this.target = target;\r\n    }\r\n    h : (a : A) => void;\r\n    target : Vertex;\r\n}\r\n","import { Lazy } from \"./Lazy\";\r\nimport { Cell } from \"./Cell\";\r\nimport { Stream } from \"./Stream\";\r\nimport { Transaction } from \"./Transaction\";\r\n\r\nexport class LazyCell<A> extends Cell<A> {\r\n    constructor(lazyInitValue : Lazy<A>, str? : Stream<A>) {\r\n        super(null, null);\r\n        Transaction.run(() => {\r\n            if (str)\r\n                this.setStream(str);\r\n            this.lazyInitValue = lazyInitValue;\r\n        });\r\n    }\r\n\r\n    sampleNoTrans__() : A {  // Override\r\n        if (this.value == null && this.lazyInitValue != null) {\r\n            this.value = this.lazyInitValue.get();\r\n            this.lazyInitValue = null;\r\n        }\r\n        return this.value;\r\n    }\r\n}\r\n","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\r\n         Lambda2, Lambda2_deps, Lambda2_toFunction,\r\n         Lambda3, Lambda3_deps, Lambda3_toFunction,\r\n         Lambda4, Lambda4_deps, Lambda4_toFunction,\r\n         Lambda5, Lambda5_deps, Lambda5_toFunction,\r\n         Lambda6, Lambda6_deps, Lambda6_toFunction,\r\n         toSources } from \"./Lambda\";\r\nimport { Source, Vertex } from \"./Vertex\";\r\nimport { Transaction } from \"./Transaction\";\r\nimport { CoalesceHandler } from \"./CoalesceHandler\";\r\nimport { Cell } from \"./Cell\";\r\n//import { StreamLoop } from \"./StreamLoop\";\r\nimport { Listener } from \"./Listener\";\r\nimport { Tuple2 } from \"./Tuple2\";\r\nimport { Lazy } from \"./Lazy\";\r\nimport { LazyCell } from \"./LazyCell\";\r\nimport * as Z from \"sanctuary-type-classes\";\r\n\r\nexport class Stream<A> {\r\n    constructor(vertex? : Vertex) {\r\n        this.vertex = vertex ? vertex : new Vertex(\"Stream\", 0, []);\r\n    }\r\n\r\n    getVertex__() : Vertex {\r\n        return this.vertex;\r\n    }\r\n\r\n    protected vertex : Vertex;\r\n    protected listeners : Array<Listener<A>> = [];\r\n    protected firings : A[] = [];\r\n\r\n    /**\r\n     * Transform the stream's event values according to the supplied function, so the returned\r\n     * Stream's event values reflect the value of the function applied to the input\r\n     * Stream's event values.\r\n     * @param f Function to apply to convert the values. It may construct FRP logic or use\r\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n     */\r\n    map<B>(f : ((a : A) => B) | Lambda1<A,B>) : Stream<B> {\r\n        const out = new StreamWithSend<B>(null);\r\n        const ff = Lambda1_toFunction(f);\r\n        out.vertex = new Vertex(\"map\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            out.send_(ff(a));\r\n                        }, false);\r\n                    }\r\n                )\r\n            ].concat(toSources(Lambda1_deps(f)))\r\n        );\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Transform the stream's event values into the specified constant value.\r\n     * @param b Constant value.\r\n     */\r\n    mapTo<B>(b : B) : Stream<B> {\r\n        const out = new StreamWithSend<B>(null);\r\n        out.vertex = new Vertex(\"mapTo\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            out.send_(b);\r\n                        }, false);\r\n                    }\r\n                )\r\n            ]\r\n        );\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Variant of {@link Stream#merge(Stream, Lambda2)} that merges two streams and will drop an event\r\n     * in the simultaneous case.\r\n     * <p>\r\n     * In the case where two events are simultaneous (i.e. both\r\n     * within the same transaction), the event from <em>this</em> will take precedence, and\r\n     * the event from <em>s</em> will be dropped.\r\n     * If you want to specify your own combining function, use {@link Stream#merge(Stream, Lambda2)}.\r\n     * s1.orElse(s2) is equivalent to s1.merge(s2, (l, r) -&gt; l).\r\n     * <p>\r\n     * The name orElse() is used instead of merge() to make it really clear that care should\r\n     * be taken, because events can be dropped.\r\n     */\r\n    orElse(s : Stream<A>) : Stream<A> {\r\n        return this.merge(s, (left : A, right: A) => {\r\n            return left;\r\n        });\r\n    }\r\n\r\n    private merge_(s : Stream<A>) : Stream<A> {\r\n        const out = new StreamWithSend<A>();\r\n        const left = new Vertex(\"merge\", 0, []);\r\n        left.sources.push(new Source(this.vertex, () => {\r\n            return this.listen_(left, (a : A) => {\r\n                    out.send_(a);\r\n                }, false);\r\n        }));\r\n        out.vertex.sources = out.vertex.sources.concat([\r\n                new Source(\r\n                    left,\r\n                    () => {\r\n                        left.register(out.vertex);\r\n                        return () => { left.deregister(out.vertex); }\r\n                    }\r\n                ),\r\n                new Source(\r\n                    s.vertex,\r\n                    () => {\r\n                        return s.listen_(out.vertex, (a : A) => {\r\n                            out.send_(a);\r\n                        }, false);\r\n                    }\r\n                )\r\n            ]);\r\n        return out;\r\n    }\r\n\r\n    coalesce__(f : ((left : A, right : A) => A) | Lambda2<A,A,A>) : Stream<A> {  // TO DO figure out how to hide this\r\n        const out = new StreamWithSend<A>();\r\n        const coalescer = new CoalesceHandler<A>(f, out);\r\n        out.vertex.sources = out.vertex.sources.concat([\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            coalescer.send_(a);\r\n                        }, false);\r\n                    }\r\n                )\r\n            ]).concat(toSources(Lambda2_deps(f)));\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Merge two streams of the same type into one, so that events on either input appear\r\n     * on the returned stream.\r\n     * <p>\r\n     * If the events are simultaneous (that is, one event from this and one from <em>s</em>\r\n     * occurring in the same transaction), combine them into one using the specified combining function\r\n     * so that the returned stream is guaranteed only ever to have one event per transaction.\r\n     * The event from <em>this</em> will appear at the left input of the combining function, and\r\n     * the event from <em>s</em> will appear at the right.\r\n     * @param f Function to combine the values. It may construct FRP logic or use\r\n     *    {@link Cell#sample()}. Apart from this the function must be <em>referentially transparent</em>.\r\n     */\r\n    merge(s : Stream<A>, f : ((left : A, right : A) => A) | Lambda2<A,A,A>) : Stream<A> {\r\n        return Transaction.run<Stream<A>>(() => {\r\n            return this.merge_(s).coalesce__(f);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return a stream that only outputs events for which the predicate returns true.\r\n     */\r\n    filter(f : ((a : A) => boolean) | Lambda1<A,boolean>) : Stream<A> {\r\n        const out = new StreamWithSend<A>(null);\r\n        const ff = Lambda1_toFunction(f);\r\n        out.vertex = new Vertex(\"filter\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            if (ff(a))\r\n                                out.send_(a);\r\n                        }, false);\r\n                    }\r\n                )\r\n            ].concat(toSources(Lambda1_deps(f)))\r\n        );\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Return a stream that only outputs events that have present\r\n     * values, discarding null values.\r\n     */\r\n    filterNotNull() : Stream<A> {\r\n        const out = new StreamWithSend<A>(null);\r\n        out.vertex = new Vertex(\"filterNotNull\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            if (a !== null)\r\n                                out.send_(a);\r\n                        }, false);\r\n                    }\r\n                )\r\n            ]\r\n        );\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Return a stream that only outputs events from the input stream\r\n     * when the specified cell's value is true.\r\n     */\r\n    gate(c : Cell<boolean>) : Stream<A> {\r\n        return this.snapshot(c, (a : A, pred : boolean) => {\r\n            return pred ? a : null;\r\n        }).filterNotNull();\r\n    }\r\n\r\n\t/**\r\n\t * Variant of {@link snapshot(Cell, Lambda2)} that captures the cell's value\r\n\t * at the time of the event firing, ignoring the stream's value.\r\n\t */\r\n\tsnapshot1<B>(c : Cell<B>) : Stream<B> {\r\n        const out = new StreamWithSend<B>(null);\r\n        out.vertex = new Vertex(\"snapshot1\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            out.send_(c.sampleNoTrans__());\r\n                        }, false);\r\n                    }\r\n                ),\r\n                new Source(c.getVertex__(), null)\r\n            ]\r\n        );\r\n        return out;\r\n\t}\r\n\r\n\t/**\r\n\t * Return a stream whose events are the result of the combination using the specified\r\n\t * function of the input stream's event value and the value of the cell at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, {@link Stream#snapshot(Cell, Lambda2)}\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n\tsnapshot<B,C>(b : Cell<B>, f_ : ((a : A, b : B) => C) | Lambda2<A,B,C>) : Stream<C>\r\n\t{\r\n        const out = new StreamWithSend<C>(null);\r\n        const ff = Lambda2_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            out.send_(ff(a, b.sampleNoTrans__()));\r\n                        }, false);\r\n                    }\r\n                ),\r\n                new Source(b.getVertex__(), null)\r\n            ].concat(toSources(Lambda2_deps(f_)))\r\n        );\r\n        return out;\r\n\t}\r\n\r\n\t/**\r\n\t * Return a stream whose events are the result of the combination using the specified\r\n\t * function of the input stream's event value and the value of the cells at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, snapshot()\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n\tsnapshot3<B,C,D>(b : Cell<B>, c : Cell<C>, f_ : ((a : A, b : B, c : C) => D) | Lambda3<A,B,C,D>) : Stream<D>\r\n\t{\r\n        const out = new StreamWithSend<D>(null);\r\n        const ff = Lambda3_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__()));\r\n                        }, false);\r\n                    }\r\n                ),\r\n                new Source(b.getVertex__(), null),\r\n                new Source(c.getVertex__(), null)\r\n            ].concat(toSources(Lambda3_deps(f_)))\r\n        );\r\n        return out;\r\n\t}\r\n\r\n\t/**\r\n\t * Return a stream whose events are the result of the combination using the specified\r\n\t * function of the input stream's event value and the value of the cells at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, snapshot()\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n\tsnapshot4<B,C,D,E>(b : Cell<B>, c : Cell<C>, d : Cell<D>,\r\n\t    f_ : ((a : A, b : B, c : C, d : D) => E) | Lambda4<A,B,C,D,E>) : Stream<E>\r\n\t{\r\n        const out = new StreamWithSend<E>(null);\r\n        const ff = Lambda4_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(),\r\n                                            d.sampleNoTrans__()));\r\n                        }, false);\r\n                    }\r\n                ),\r\n                new Source(b.getVertex__(), null),\r\n                new Source(c.getVertex__(), null),\r\n                new Source(d.getVertex__(), null)\r\n            ].concat(toSources(Lambda4_deps(f_)))\r\n        );\r\n        return out;\r\n\t}\r\n\r\n\t/**\r\n\t * Return a stream whose events are the result of the combination using the specified\r\n\t * function of the input stream's event value and the value of the cells at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, snapshot()\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n\tsnapshot5<B,C,D,E,F>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>,\r\n\t    f_ : ((a : A, b : B, c : C, d : D, e : E) => F) | Lambda5<A,B,C,D,E,F>) : Stream<F>\r\n\t{\r\n        const out = new StreamWithSend<F>(null);\r\n        const ff = Lambda5_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(),\r\n                                            d.sampleNoTrans__(), e.sampleNoTrans__()));\r\n                        }, false);\r\n                    }\r\n                ),\r\n                new Source(b.getVertex__(), null),\r\n                new Source(c.getVertex__(), null),\r\n                new Source(d.getVertex__(), null),\r\n                new Source(e.getVertex__(), null)\r\n            ].concat(toSources(Lambda5_deps(f_)))\r\n        );\r\n        return out;\r\n\t}\r\n\r\n\t/**\r\n\t * Return a stream whose events are the result of the combination using the specified\r\n\t * function of the input stream's event value and the value of the cells at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, snapshot()\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n\tsnapshot6<B,C,D,E,F,G>(b : Cell<B>, c : Cell<C>, d : Cell<D>, e : Cell<E>, f : Cell<F>,\r\n\t    f_ : ((a : A, b : B, c : C, d : D, e : E, f : F) => G) | Lambda6<A,B,C,D,E,F,G>) : Stream<G>\r\n\t{\r\n        const out = new StreamWithSend<G>(null);\r\n        const ff = Lambda6_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n                new Source(\r\n                    this.vertex,\r\n                    () => {\r\n                        return this.listen_(out.vertex, (a : A) => {\r\n                            out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(),\r\n                                            d.sampleNoTrans__(), e.sampleNoTrans__(),\r\n                                            f.sampleNoTrans__()));\r\n                        }, false);\r\n                    }\r\n                ),\r\n                new Source(b.getVertex__(), null),\r\n                new Source(c.getVertex__(), null),\r\n                new Source(d.getVertex__(), null),\r\n                new Source(e.getVertex__(), null),\r\n                new Source(f.getVertex__(), null)\r\n            ].concat(toSources(Lambda6_deps(f_)))\r\n        );\r\n        return out;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a {@link Cell} with the specified initial value, that is updated\r\n     * by this stream's event values.\r\n     * <p>\r\n     * There is an implicit delay: State updates caused by event firings don't become\r\n     * visible as the cell's current value as viewed by {@link Stream#snapshot(Cell, Lambda2)}\r\n     * until the following transaction. To put this another way,\r\n     * {@link Stream#snapshot(Cell, Lambda2)} always sees the value of a cell as it was before\r\n     * any state changes from the current transaction.\r\n     */\r\n    hold(initValue : A) : Cell<A> {\r\n        return new Cell<A>(initValue, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A variant of {@link hold(Object)} with an initial value captured by {@link Cell#sampleLazy()}.\r\n\t */\r\n\tholdLazy(initValue : Lazy<A>) : Cell<A> {\r\n\t    return new LazyCell<A>(initValue, this);\r\n\t}\r\n\r\n    /**\r\n     * Transform an event with a generalized state loop (a Mealy machine). The function\r\n     * is passed the input and the old state and returns the new state and output value.\r\n     * @param f Function to apply to update the state. It may construct FRP logic or use\r\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n     */\r\n    collect<B,S>(initState : S, f : ((a : A, s : S) => Tuple2<B,S>) | Lambda2<A,S,Tuple2<B,S>>) : Stream<B> {\r\n        return this.collectLazy(new Lazy<S>(() => { return initState; }), f);\r\n    }\r\n\r\n    /**\r\n     * A variant of {@link collect(Object, Lambda2)} that takes an initial state returned by\r\n     * {@link Cell#sampleLazy()}.\r\n     */\r\n    collectLazy<B,S>(initState : Lazy<S>, f : ((a : A, s : S) => Tuple2<B,S>) | Lambda2<A,S,Tuple2<B,S>>) : Stream<B> {\r\n        const ea = this;\r\n        return Transaction.run(() => {\r\n            const es = new StreamLoop<S>(),\r\n                s = es.holdLazy(initState),\r\n                ebs = ea.snapshot(s, f),\r\n                eb = ebs.map((bs : Tuple2<B,S>) => { return bs.a; }),\r\n                es_out = ebs.map((bs : Tuple2<B,S>) => { return bs.b; });\r\n            es.loop(es_out);\r\n            return eb;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Accumulate on input event, outputting the new state each time.\r\n     * @param f Function to apply to update the state. It may construct FRP logic or use\r\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n     */\r\n    accum<S>(initState : S, f : ((a : A, s : S) => S) | Lambda2<A,S,S>) : Cell<S> {\r\n        return this.accumLazy(new Lazy<S>(() => { return initState; }), f);\r\n    }\r\n\r\n    /**\r\n     * A variant of {@link accum(Object, Lambda2)} that takes an initial state returned by\r\n     * {@link Cell#sampleLazy()}.\r\n     */\r\n    accumLazy<S>(initState : Lazy<S>, f : ((a : A, s : S) => S) | Lambda2<A,S,S>) : Cell<S> {\r\n        const ea = this;\r\n        return Transaction.run(() => {\r\n            const es = new StreamLoop<S>(),\r\n                s = es.holdLazy(initState),\r\n                es_out = ea.snapshot(s, f);\r\n            es.loop(es_out);\r\n            return es_out.holdLazy(initState);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return a stream that outputs only one value: the next event of the\r\n     * input stream, starting from the transaction in which once() was invoked.\r\n     */\r\n    once() : Stream<A> {\r\n    /*\r\n        return Transaction.run(() => {\r\n            const ev = this,\r\n                out = new StreamWithSend<A>();\r\n            let la : () => void = null;\r\n            la = ev.listen_(out.vertex, (a : A) => {\r\n                if (la !== null) {\r\n                    out.send_(a);\r\n                    la();\r\n                    la = null;\r\n                }\r\n            }, false);\r\n            return out;\r\n        });\r\n        */\r\n        // We can't use the implementation above, beacuse deregistering\r\n        // listeners triggers the exception\r\n        // \"send() was invoked before listeners were registered\"\r\n        // We can revisit this another time. For now we will use the less\r\n        // efficient implementation below.\r\n        const me = this;\r\n        return Transaction.run(() => me.gate(me.mapTo(false).hold(true)));\r\n    }\r\n\r\n    listen(h : (a : A) => void) : () => void {\r\n        return Transaction.run<() => void>(() => {\r\n            return this.listen_(Vertex.NULL, h, false);\r\n        });\r\n    }\r\n\r\n    listen_(target : Vertex,\r\n            h : (a : A) => void,\r\n            suppressEarlierFirings : boolean) : () => void {\r\n        if (this.vertex.register(target))\r\n            Transaction.currentTransaction.requestRegen();\r\n        const listener = new Listener<A>(h, target);\r\n        this.listeners.push(listener);\r\n        if (!suppressEarlierFirings && this.firings.length != 0) {\r\n            const firings = this.firings.slice();\r\n            Transaction.currentTransaction.prioritized(target, () => {\r\n                // Anything sent already in this transaction must be sent now so that\r\n                // there's no order dependency between send and listen.\r\n                for (let i = 0; i < firings.length; i++)\r\n                    h(firings[i]);\r\n            });\r\n        }\r\n        return () => {\r\n            let removed = false;\r\n            for (let i = 0; i < this.listeners.length; i++) {\r\n                if (this.listeners[i] == listener) {\r\n                    this.listeners.splice(i, 1);\r\n                    removed = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (removed)\r\n                this.vertex.deregister(target);\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * Fantasy-land Algebraic Data Type Compatability.\r\n     * Stream satisfies the Functor and Monoid Categories (and hence Semigroup)\r\n     * @see {@link https://github.com/fantasyland/fantasy-land} for more info\r\n     */\r\n\r\n    //map :: Functor f => f a ~> (a -> b) -> f b\r\n    'fantasy-land/map'<B>(f : ((a : A) => B)) : Stream<B> {\r\n      return this.map(f);\r\n    }\r\n\r\n    //concat :: Semigroup a => a ~> a -> a\r\n    'fantasy-land/concat'(a:Stream<A>) : Stream<A> {\r\n      return this.merge(a, (left:any, right) => {\r\n        return (Z.Semigroup.test(left)) ? Z.concat(left, right) : left;\r\n      });\r\n    }\r\n\r\n    //empty :: Monoid m => () -> m\r\n    'fantasy-land/empty'() : Stream<A> {\r\n      return new Stream<A>();\r\n    }\r\n}\r\n\r\nexport class StreamWithSend<A> extends Stream<A> {\r\n    constructor(vertex? : Vertex) {\r\n        super(vertex);\r\n    }\r\n\r\n    setVertex__(vertex : Vertex) {  // TO DO figure out how to hide this\r\n        this.vertex = vertex;\r\n    }\r\n\r\n    send_(a : A) : void {\r\n        // We throw this error if we send into FRP logic that has been constructed\r\n        // but nothing is listening to it yet. We need to do it this way because\r\n        // it's the only way to manage memory in a language with no finalizers.\r\n        if (this.vertex.refCount() == 0)\r\n            throw new Error(\"send() was invoked before listeners were registered\");\r\n\t\tif (this.firings.length == 0)\r\n\t\t\tTransaction.currentTransaction.last(() => {\r\n\t\t\t    this.firings = [];\r\n            });\r\n\t\tthis.firings.push(a);\r\n\t\tconst listeners = this.listeners.slice();\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            const h = listeners[i].h;\r\n            Transaction.currentTransaction.prioritized(listeners[i].target, () => {\r\n                Transaction.currentTransaction.inCallback++;\r\n                try {\r\n                    h(a);\r\n                    Transaction.currentTransaction.inCallback--;\r\n                }\r\n                catch (err) {\r\n                    Transaction.currentTransaction.inCallback--;\r\n                    throw err;\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * A forward reference for a {@link Stream} equivalent to the Stream that is referenced.\r\n */\r\nexport class StreamLoop<A> extends StreamWithSend<A> {\r\n    assigned__ : boolean = false;  // to do: Figure out how to hide this\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n        this.vertex.name = \"StreamLoop\";\r\n    \tif (Transaction.currentTransaction === null)\r\n    \t    throw new Error(\"StreamLoop/CellLoop must be used within an explicit transaction\");\r\n    }\r\n\r\n    /**\r\n     * Resolve the loop to specify what the StreamLoop was a forward reference to. It\r\n     * must be invoked inside the same transaction as the place where the StreamLoop is used.\r\n     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\r\n     * or {@link Transaction#runVoid(Runnable)}.\r\n     */\r\n    loop(sa_out : Stream<A>) : void {\r\n        if (this.assigned__)\r\n            throw new Error(\"StreamLoop looped more than once\");\r\n        this.assigned__ = true;\r\n        this.vertex.addSource(\r\n            new Source(\r\n                sa_out.getVertex__(),\r\n                () => {\r\n                    return sa_out.listen_(this.vertex, (a : A) => {\r\n                        this.send_(a);\r\n                    }, false);\r\n                }\r\n            )\r\n        );\r\n    }\r\n}\r\n","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\r\n         Lambda2, Lambda2_deps, Lambda2_toFunction } from \"./Lambda\";\r\nimport { StreamWithSend } from \"./Stream\";\r\nimport { CoalesceHandler } from \"./CoalesceHandler\";\r\nimport { Transaction } from \"./Transaction\";\r\n\r\n/**\r\n * A stream that allows values to be pushed into it, acting as an interface between the\r\n * world of I/O and the world of FRP. Code that exports StreamSinks for read-only use\r\n * should downcast to {@link Stream}.\r\n */\r\nexport class StreamSink<A> extends StreamWithSend<A> {\r\n    constructor(f? : ((l : A, r : A) => A) | Lambda2<A, A, A>) {\r\n        super();\r\n        if (!f)\r\n            f = <(l : A, r : A) => A>((l : A, r : A) => {\r\n                throw new Error(\"send() called more than once per transaction, which isn't allowed. Did you want to combine the events? Then pass a combining function to your StreamSink constructor.\");\r\n            });\r\n        this.coalescer = new CoalesceHandler<A>(f, this);\r\n    }\r\n\r\n    private coalescer : CoalesceHandler<A>;\r\n\r\n    send(a : A) : void {\r\n        Transaction.run<void>(\r\n            () => {\r\n                if (Transaction.currentTransaction.inCallback > 0)\r\n                    throw new Error(\"You are not allowed to use send() inside a Sodium callback\");\r\n                this.coalescer.send_(a);\r\n            }\r\n        )\r\n    }\r\n}\r\n","import { Cell } from \"./Cell\";\r\nimport { Lazy } from \"./Lazy\";\r\nimport { LazyCell } from \"./LazyCell\";\r\nimport { Transaction } from \"./Transaction\";\r\nimport { StreamLoop } from \"./Stream\";\r\n\r\n/**\r\n * A forward reference for a {@link Cell} equivalent to the Cell that is referenced.\r\n */\r\nexport class CellLoop<A> extends LazyCell<A> {\r\n    constructor() {\r\n    \tsuper(null, new StreamLoop<A>());\r\n    }\r\n\r\n    /**\r\n     * Resolve the loop to specify what the CellLoop was a forward reference to. It\r\n     * must be invoked inside the same transaction as the place where the CellLoop is used.\r\n     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\r\n     * or {@link Transaction#runVoid(Runnable)}.\r\n     */\r\n    loop(a_out : Cell<A>) : void {\r\n        const me = this;\r\n        Transaction.run(() => {\r\n            (<StreamLoop<A>>me.getStream__()).loop(a_out.getStream__());\r\n            me.lazyInitValue = a_out.sampleLazy();\r\n        });\r\n    }\r\n\r\n    sampleNoTrans__() : A\r\n    {\r\n        if (!(<StreamLoop<A>>this.getStream__()).assigned__)\r\n            throw new Error(\"CellLoop sampled before it was looped\");\r\n        return super.sampleNoTrans__();\r\n    }\r\n}\r\n","import { Lambda1, Lambda1_deps, Lambda1_toFunction,\r\n         Lambda2, Lambda2_deps, Lambda2_toFunction } from \"./Lambda\";\r\nimport { Cell } from \"./Cell\";\r\nimport { StreamSink } from \"./StreamSink\";\r\nimport { Transaction } from \"./Transaction\";\r\n\r\n/**\r\n * A cell that allows values to be pushed into it, acting as an interface between the\r\n * world of I/O and the world of FRP. Code that exports CellSinks for read-only use\r\n * should downcast to {@link Cell}.\r\n */\r\nexport class CellSink<A> extends Cell<A> {\r\n    /**\r\n     * Construct a writable cell with the specified initial value. If multiple values are\r\n     * sent in the same transaction, the specified function is used to combine them.\r\n     *\r\n     * If the function is not supplied, then an exception will be thrown in this case.\r\n     */\r\n    constructor(initValue : A, f? : ((l : A, r : A) => A) | Lambda2<A, A, A>) {\r\n    \tsuper(initValue, new StreamSink<A>(f));\r\n    }\r\n\r\n    /**\r\n     * Send a value, modifying the value of the cell. send(A) may not be used inside\r\n     * handlers registered with {@link Stream#listen(Handler)} or {@link Cell#listen(Handler)}.\r\n     * An exception will be thrown, because CellSink is for interfacing I/O to FRP only.\r\n     * You are not meant to use this to define your own primitives.\r\n     * @param a Value to push into the cell.\r\n     */\r\n    send(a : A) : void {\r\n        (<StreamSink<A>>this.getStream__()).send(a);\r\n    }\r\n}\r\n","export class Tuple2<A,B> {\r\n    constructor(a : A, b : B) {\r\n        this.a = a;\r\n        this.b = b;\r\n    }\r\n    a : A;\r\n    b : B;\r\n}\r\n","import { Vertex, Source } from \"./Vertex\";\r\nimport * as Collections from 'typescript-collections';\r\nimport { Stream, StreamWithSend } from \"./Stream\";\r\nimport { StreamSink } from \"./StreamSink\";\r\nimport { Cell } from \"./Cell\";\r\nimport { CellSink } from \"./CellSink\";\r\nimport { Transaction } from \"./Transaction\";\r\n\r\n/**\r\n * An interface for implementations of FRP timer systems.\r\n */\r\nexport abstract class TimerSystemImpl {\r\n    /**\r\n     * Set a timer that will execute the specified callback at the specified time.\r\n     * @return A function that can be used to cancel the timer.\r\n     */\r\n    abstract setTimer(t : number, callback : () => void) : () => void;\r\n\r\n    /**\r\n     * Return the current clock time.\r\n     */\r\n    abstract now() : number;\r\n}\r\n\r\nlet nextSeq : number = 0;\r\n\r\nclass Event {\r\n    constructor(t : number, sAlarm : StreamWithSend<number>) {\r\n        this.t = t;\r\n        this.sAlarm = sAlarm;\r\n        this.seq = ++nextSeq;\r\n    }\r\n    t : number;\r\n    sAlarm : StreamWithSend<number>;\r\n    seq : number;  // Used to guarantee uniqueness\r\n}\r\n\r\nexport class TimerSystem {\r\n    constructor(impl : TimerSystemImpl) {\r\n        Transaction.run(() => {\r\n            this.impl = impl;\r\n            this.tMinimum = 0;\r\n            const timeSnk = new CellSink<number>(impl.now());\r\n            this.time = timeSnk;\r\n            // A dummy listener to time to keep it alive even when there are no other listeners.\r\n            this.time.listen((t : number) => { });\r\n            Transaction.onStart(() => {\r\n                // Ensure the time is always increasing from the FRP's point of view.\r\n                const t = this.tMinimum = Math.max(this.tMinimum, impl.now());\r\n                // Pop and execute all events earlier than or equal to t (the current time).\r\n                while (true) {\r\n                    let ev : Event = null;\r\n                    if (!this.eventQueue.isEmpty()) {\r\n                        let mev = this.eventQueue.minimum();\r\n                        if (mev.t <= t) {\r\n                            ev = mev;\r\n                            // TO DO: Detect infinite loops!\r\n                        }\r\n                    }\r\n                    if (ev != null) {\r\n                        timeSnk.send(ev.t);\r\n                        Transaction.run(() => ev.sAlarm.send_(ev.t));\r\n                    }\r\n                    else\r\n                        break;\r\n                }\r\n                timeSnk.send(t);\r\n            });\r\n        });\r\n    }\r\n\r\n    private impl : TimerSystemImpl;\r\n    private tMinimum : number;  // A guard to allow us to guarantee that the time as\r\n                                // seen by the FRP is always increasing.\r\n\r\n    /**\r\n     * A cell giving the current clock time.\r\n     */\r\n    time : Cell<number>;\r\n\r\n    private eventQueue : Collections.BSTree<Event> = new Collections.BSTree<Event>((a, b) => {\r\n        if (a.t < b.t) return -1;\r\n        if (a.t > b.t) return 1;\r\n        if (a.seq < b.seq) return -1;\r\n        if (a.seq > b.seq) return 1;\r\n        return 0;\r\n    });\r\n\r\n    /**\r\n     * A timer that fires at the specified time, which can be null, meaning\r\n     * that the alarm is not set.\r\n     */\r\n    at(tAlarm : Cell<number>) : Stream<number> {\r\n        let current : Event = null,\r\n            cancelCurrent : () => void = null,\r\n            active : boolean = false,\r\n            tAl : number = null,\r\n            sampled : boolean = false;\r\n        const sAlarm = new StreamWithSend<number>(null),\r\n            updateTimer = () => {\r\n                if (cancelCurrent !== null) {\r\n                    cancelCurrent();\r\n                    this.eventQueue.remove(current);\r\n                }\r\n                cancelCurrent = null;\r\n                current = null;\r\n                if (active) {\r\n                    if (!sampled) {\r\n                        sampled = true;\r\n                        tAl = tAlarm.sampleNoTrans__();\r\n                    }\r\n                    if (tAl !== null) {\r\n                        current = new Event(tAl, sAlarm);\r\n                        this.eventQueue.add(current);\r\n                        cancelCurrent = this.impl.setTimer(tAl, () => {\r\n                                    // Correction to ensure the clock time appears to be >= the\r\n                                    // alarm time. It can be a few milliseconds early, and\r\n                                    // this breaks things otherwise, because it doesn't think\r\n                                    // it's time to fire the alarm yet.\r\n                                    this.tMinimum = Math.max(this.tMinimum, tAl);\r\n                                    // Open and close a transaction to trigger queued\r\n                                    // events to run.\r\n                                    Transaction.run(() => {});\r\n                                });\r\n                    }\r\n                }\r\n            };\r\n        sAlarm.setVertex__(new Vertex(\"at\", 0, [\r\n                new Source(\r\n                    tAlarm.getVertex__(),\r\n                    () => {\r\n                        active = true;\r\n                        sampled = false;\r\n                        Transaction.currentTransaction.prioritized(sAlarm.getVertex__(), updateTimer);\r\n                        const kill = tAlarm.getStream__().listen_(sAlarm.getVertex__(), (oAlarm : number) => {\r\n                            tAl = oAlarm;\r\n                            sampled = true;\r\n                            updateTimer();\r\n                        }, false);\r\n                        return () => {\r\n                            active = false;\r\n                            updateTimer();\r\n                            kill();\r\n                        };\r\n                    }\r\n                )\r\n            ]\r\n        ));\r\n        return sAlarm;\r\n    }\r\n}\r\n\r\n","import { TimerSystem, TimerSystemImpl } from \"./TimerSystem\";\r\n\r\n/**\r\n * A timer system implementation using seconds as the time unit.\r\n */\r\nexport class SecondsTimerSystem extends TimerSystem {\r\n    constructor() {\r\n        super(new SecondsTimerSystemImpl());\r\n    }\r\n}\r\n\r\nclass SecondsTimerSystemImpl extends TimerSystemImpl {\r\n    /**\r\n     * Set a timer that will execute the specified callback at the specified time.\r\n     * @return A function that can be used to cancel the timer.\r\n     */\r\n    setTimer(t : number, callback : () => void) : () => void\r\n    {\r\n        let timeout = setTimeout(callback, Math.max((t - this.now()) * 1000, 0));\r\n        return () => { clearTimeout(timeout); }\r\n    }\r\n\r\n    /**\r\n     * Return the current clock time.\r\n     */\r\n    now() : number\r\n    {\r\n        return Date.now() * 0.001;\r\n    }\r\n}\r\n","import { TimerSystem, TimerSystemImpl } from \"./TimerSystem\";\r\n\r\n/**\r\n * A timer system implementation using milliseconds as the time unit.\r\n */\r\nexport class MillisecondsTimerSystem extends TimerSystem {\r\n    constructor() {\r\n        super(new MillisecondsTimerSystemImpl());\r\n    }\r\n}\r\n\r\nclass MillisecondsTimerSystemImpl extends TimerSystemImpl {\r\n    /**\r\n     * Set a timer that will execute the specified callback at the specified time.\r\n     * @return A function that can be used to cancel the timer.\r\n     */\r\n    setTimer(t : number, callback : () => void) : () => void\r\n    {\r\n        let timeout = setTimeout(callback, Math.max(t - this.now(), 0));\r\n        return () => { clearTimeout(timeout); }\r\n    }\r\n\r\n    /**\r\n     * Return the current clock time.\r\n     */\r\n    now() : number\r\n    {\r\n        return Date.now();\r\n    }\r\n}\r\n","import { Stream, StreamWithSend } from \"./Stream\";\r\nimport { Vertex, Source } from \"./Vertex\";\r\nimport { Transaction } from \"./Transaction\";\r\n\r\nexport class IOAction {\r\n    /*!\r\n     * Convert a function that performs asynchronous I/O taking input A\r\n     * and returning a value of type B into an I/O action of type\r\n     * (sa : Stream<A>) => Stream<B>\r\n     */\r\n    static fromAsync<A,B>(performIO : (a : A, result : (b : B) => void) => void)\r\n            : (sa : Stream<A>) => Stream<B> {\r\n        return (sa : Stream<A>) => {\r\n            const out = new StreamWithSend<B>(null);\r\n            out.setVertex__(new Vertex(\"map\", 0, [\r\n                    new Source(\r\n                        sa.getVertex__(),\r\n                        () => {\r\n                            return sa.listen_(out.getVertex__(), (a : A) => {\r\n                                performIO(a, (b : B) => {\r\n                                    Transaction.run(() => {\r\n                                        out.send_(b);\r\n                                    });\r\n                                });\r\n                            }, false);\r\n                        }\r\n                    )\r\n                ]\r\n            ));\r\n            return out;\r\n        }\r\n    }\r\n}\r\n"],"names":["Collections.PriorityQueue","Collections.Set","tslib_1.__extends","Z.Semigroup","Z.concat","Collections.BSTree"],"mappings":"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"}